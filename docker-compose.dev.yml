# ==============================================================================
# Development Docker Compose Configuration
# NestJS Realtime Server
# ==============================================================================

version: '3.8'

services:
  # ==============================================================================
  # Application Service
  # ==============================================================================
  
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: realtime-server-dev
    hostname: app
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:8080"
      - "${DEBUG_PORT:-9229}:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=8080
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-realtime_chat}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-}@redis:6379/0
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
      - RABBITMQ_URL=amqp://${RABBITMQ_USER:-admin}:${RABBITMQ_PASSWORD}@rabbitmq:5672
      - JWT_ACCESS_TOKEN=${JWT_ACCESS_TOKEN}
      - JWT_ACCESS_EXPIRED=${JWT_ACCESS_EXPIRED:-7d}
      - JWT_REFRESH_TOKEN=${JWT_REFRESH_TOKEN}
      - JWT_REFRESH_EXPIRED=${JWT_REFRESH_EXPIRED:-30d}
      - PRISMA_CLIENT_ENGINE_TYPE=binary
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - realtime-net-dev
    volumes:
      - .:/app
      - /app/node_modules
      - app-logs-dev:/app/logs
      - app-uploads-dev:/app/uploads
    command: sh -c "npx prisma generate && npm run start:dev"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ==============================================================================
  # Database Service
  # ==============================================================================
  
  postgres:
    image: postgres:16-alpine
    container_name: realtime-postgres-dev
    hostname: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB:-realtime_chat}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres-data-dev:/var/lib/postgresql/data
      - ./docker/init-scripts:/docker-entrypoint-initdb.d
    networks:
      - realtime-net-dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-realtime_chat}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # Cache Service
  # ==============================================================================
  
  redis:
    image: redis:7-alpine
    container_name: realtime-redis-dev
    hostname: redis
    restart: unless-stopped
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data-dev:/data
      - ./docker/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf --requirepass ${REDIS_PASSWORD:-}
    networks:
      - realtime-net-dev
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # Message Queue Service
  # ==============================================================================
  
  rabbitmq:
    image: rabbitmq:3.13-management-alpine
    container_name: realtime-rabbitmq-dev
    hostname: rabbitmq
    restart: unless-stopped
    ports:
      - "${RABBITMQ_PORT:-5672}:5672"
      - "${RABBITMQ_MANAGEMENT_PORT:-15672}:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-admin}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - rabbitmq-data-dev:/var/lib/rabbitmq
      - ./docker/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
    networks:
      - realtime-net-dev
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "-q", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  # ==============================================================================
  # Reverse Proxy Service
  # ==============================================================================
  
  nginx:
    image: nginx:1.26-alpine
    container_name: realtime-nginx-dev
    hostname: nginx
    restart: unless-stopped
    ports:
      - "${HTTP_PORT:-80}:80"
    volumes:
      - ./docker/nginx.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ./public:/usr/share/nginx/html:ro
      - nginx-logs-dev:/var/log/nginx
    depends_on:
      app:
        condition: service_healthy
    networks:
      - realtime-net-dev
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # ==============================================================================
  # Development Tools
  # ==============================================================================
  
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: realtime-pgadmin-dev
    hostname: pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "${PGADMIN_PORT:-5050}:80"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - pgadmin-data-dev:/var/lib/pgadmin
      - ./docker/pgadmin-servers.json:/pgadmin4/servers.json:ro
    networks:
      - realtime-net-dev

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: realtime-redis-commander-dev
    hostname: redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: local:redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      HTTP_USER: ${REDIS_COMMANDER_USER:-admin}
      HTTP_PASSWORD: ${REDIS_COMMANDER_PASSWORD}
    ports:
      - "${REDIS_COMMANDER_PORT:-8087}:8081"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - realtime-net-dev

  # ==============================================================================
  # Email Testing Service
  # ==============================================================================
  
  mailhog:
    image: mailhog/mailhog:latest
    container_name: realtime-mailhog-dev
    hostname: mailhog
    restart: unless-stopped
    ports:
      - "${MAILHOG_SMTP_PORT:-1025}:1025"
      - "${MAILHOG_UI_PORT:-8025}:8025"
    networks:
      - realtime-net-dev

  # ==============================================================================
  # Database Seeding Service
  # ==============================================================================
  
  db-seed:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: realtime-db-seed-dev
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-realtime_chat}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - realtime-net-dev
    volumes:
      - .:/app
      - /app/node_modules
    command: sh -c "npx prisma db push && npx prisma db seed"
    profiles:
      - seed

# ==============================================================================
# Networks
# ==============================================================================

networks:
  realtime-net-dev:
    driver: bridge
    driver_opts:
      com.docker.network.bridge.name: realtime-network-dev
    ipam:
      config:
        - subnet: 172.26.0.0/16

# ==============================================================================
# Volumes
# ==============================================================================

volumes:
  postgres-data-dev:
    driver: local
  redis-data-dev:
    driver: local
  rabbitmq-data-dev:
    driver: local
  pgadmin-data-dev:
    driver: local
  app-logs-dev:
    driver: local
  app-uploads-dev:
    driver: local
  nginx-logs-dev:
    driver: local 
