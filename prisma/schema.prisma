generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "foreignKeys"
}

enum UserRole {
  STUDENT
  TEACHER
  ADMIN
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum LessonStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TeacherStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
}

enum EnglishLevel {
  BEGINNER
  ELEMENTARY
  INTERMEDIATE
  UPPER_INTERMEDIATE
  ADVANCED
  PROFICIENCY
}

enum DocumentType {
  TEACHING_CERTIFICATE
  EDUCATION_DIPLOMA
  LANGUAGE_CERTIFICATE
  IDENTITY_DOCUMENT
  BACKGROUND_CHECK
  OTHER
}

enum AvailabilityType {
  REGULAR
  ONE_TIME
  BLACKOUT
}

enum RateType {
  TRIAL_LESSON
  REGULAR_LESSON
  GROUP_LESSON
  INTENSIVE_COURSE
}

enum CourseType {
  STRUCTURED_COURSE // Pre-designed course with fixed curriculum
  FLEXIBLE_LESSONS // Individual lessons that can be booked separately
  INTENSIVE_COURSE // Intensive course with specific schedule
  GROUP_COURSE // Group course for multiple students
}

enum EnrollmentStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
  SUSPENDED
}

// Bảng người dùng chung
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String
  lastName    String
  phone       String?
  avatar      String?
  role        UserRole @default(STUDENT)
  isActive    Boolean  @default(true)
  lastLogin   DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  student  Student?
  teacher  Teacher?
  reviews  Review[]
  payments Payment[]

  @@map("users")
}

// Bảng học viên
model Student {
  id            String       @id // Use the same ID as User
  englishLevel  EnglishLevel @default(BEGINNER)
  learningGoals String?
  timezone      String       @default("Asia/Ho_Chi_Minh")
  
  // Relations
  user              User               @relation(fields: [id], references: [id], onDelete: Cascade)
  bookings          Booking[]
  lessons           Lesson[]
  lessonPackages    LessonPackage[]
  courseEnrollments CourseEnrollment[]

  @@map("students")
}

// Bảng giáo viên
model Teacher {
  id                String        @id // Use the same ID as User
  bio               String?
  experience        Int           @default(0) // Số năm kinh nghiệm
  education         String?
  certifications    String[]      // Các chứng chỉ
  specialties       String[]      // Chuyên môn
  hourlyRate        Decimal       @db.Decimal(10, 2)
  timezone          String        @default("Asia/Ho_Chi_Minh")
  languages         String[]      // Ngôn ngữ giảng dạy
  videoIntroUrl     String?       // Video giới thiệu
  status            TeacherStatus @default(PENDING)
  totalLessons      Int           @default(0)
  averageRating     Decimal?      @db.Decimal(3, 2)
  responseTime      Int?          // Thời gian phản hồi (phút)
  profileCompleted  Boolean       @default(false) // Profile setup completed
  verificationSubmitted Boolean   @default(false) // Verification documents submitted
  availabilitySetup Boolean       @default(false) // Availability and rates setup completed
  isLive            Boolean       @default(false) // Profile is live and accepting bookings
  advanceNoticeHours Int?         @default(24)    // Minimum advance notice for bookings
  maxAdvanceBookingHours Int?     @default(720)   // Maximum advance booking time
  allowInstantBooking Boolean     @default(false) // Allow instant booking without approval
  bookingInstructions String?     // Instructions for students when booking
  
  // Relations
  user          User                  @relation(fields: [id], references: [id], onDelete: Cascade)
  availabilities TeacherAvailability[]
  rates          TeacherRate[]
  bookings       Booking[]
  lessons        Lesson[]
  reviews        Review[]
  courses        Course[]
  verification   TeacherVerification?
  lessonPackages LessonPackage[]

  @@map("teachers")
}

// Teacher Verification Documents
model TeacherVerification {
  id            String                     @id @default(cuid())
  teacherId     String                     @unique
  documents     TeacherVerificationDocument[]
  additionalNotes String?
  linkedinUrl   String?
  portfolioUrl  String?
  reviewNotes   String?                   // Admin review notes
  submittedAt   DateTime                  @default(now())
  reviewedAt    DateTime?
  createdAt     DateTime                  @default(now())
  updatedAt     DateTime                  @updatedAt

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@map("teacher_verifications")
}

// Individual verification documents
model TeacherVerificationDocument {
  id                    String       @id @default(cuid())
  teacherVerificationId String
  type                  DocumentType
  title                 String
  documentUrl           String
  description           String?
  createdAt             DateTime     @default(now())

  // Relations
  teacherVerification TeacherVerification @relation(fields: [teacherVerificationId], references: [id], onDelete: Cascade)

  @@map("teacher_verification_documents")
}

// Lịch rảnh của giáo viên
model TeacherAvailability {
  id        String           @id @default(cuid())
  teacherId String
  dayOfWeek Int // 0-6 (Chủ nhật-Thứ 7)
  startTime String // HH:mm format
  endTime   String // HH:mm format
  type      AvailabilityType @default(REGULAR)
  isActive  Boolean          @default(true)
  createdAt DateTime         @default(now())

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, dayOfWeek, startTime])
  @@map("teacher_availabilities")
}

// Teacher Rates for different lesson types
model TeacherRate {
  id          String   @id @default(cuid())
  teacherId   String
  type        RateType
  rate        Decimal  @db.Decimal(10, 2)
  duration    Int?     @default(60) // Duration in minutes
  maxStudents Int?     @default(1) // For group lessons
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([teacherId, type])
  @@map("teacher_rates")
}

// Course Enrollment - when student purchases a course
model CourseEnrollment {
  id               String           @id @default(cuid())
  studentId        String
  courseId         String
  paymentId        String           @unique // Link to payment record
  status           EnrollmentStatus @default(ACTIVE)
  enrolledAt       DateTime         @default(now())
  expiresAt        DateTime? // Course access expiration (if applicable)
  completedLessons Int              @default(0) // Number of lessons completed
  progress         Decimal?         @default(0.0) @db.Decimal(5, 2) // Course completion percentage
  lastAccessedAt   DateTime? // When student last accessed the course
  completedAt      DateTime? // When student completed the course
  certificateUrl   String? // Certificate URL if course is completed
  enrollmentNotes  String? // Additional notes about enrollment
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  // Relations
  student  Student   @relation(fields: [studentId], references: [id], onDelete: Cascade)
  course   Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  payment  Payment   @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  // bookings Booking[]

  @@unique([studentId, courseId]) // Student can only enroll once per course
  @@map("course_enrollments")
}

// Lesson Package Model for tracking purchased lesson packages (separate from courses)
model LessonPackage {
  id                String   @id @default(cuid())
  studentId         String
  teacherId         String
  packageType       String   // PACKAGE_5, PACKAGE_10, PACKAGE_20, CUSTOM
  totalLessons      Int      // Total number of lessons in package
  usedLessons       Int      @default(0) // Number of lessons used
  remainingLessons  Int      // Calculated field: totalLessons - usedLessons
  durationPerLesson Int      @default(60) // Duration per lesson in minutes
  pricePerLesson    Decimal  @db.Decimal(10, 2)
  totalPrice        Decimal  @db.Decimal(10, 2)
  discountPercentage Int?    @default(0)
  paymentId         String   @unique // Link to payment record
  expiresAt         DateTime // Package expiration date
  isActive          Boolean  @default(true)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  student  Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher  Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  payment  Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  bookings Booking[]

  @@map("lesson_packages")
}

// Gói học
model Course {
  id          String  @id @default(cuid())
  teacherId   String
  name        String
  description String?
  duration    Int     // Số phút mỗi buổi
  totalLessons Int    // Tổng số buổi học
  price       Decimal @db.Decimal(10, 2)
  level       EnglishLevel
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  teacher     Teacher            @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  bookings    Booking[]
  lessons     Lesson[]
  enrollments CourseEnrollment[]

  @@map("courses")
}

// Đặt lịch học thử
model Booking {
  id            String        @id @default(cuid())
  studentId     String
  teacherId     String
  courseId      String?
  lessonPackageId String?     // Link to lesson package if booked through package
  scheduledAt   DateTime
  duration      Int           @default(30) // Phút
  notes         String?
  status        BookingStatus @default(PENDING)
  isTrialLesson Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  student       Student        @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher       Teacher        @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course        Course?        @relation(fields: [courseId], references: [id], onDelete: SetNull)
  lessonPackage LessonPackage? @relation(fields: [lessonPackageId], references: [id], onDelete: SetNull)
  lesson        Lesson?

  @@map("bookings")
}

// Buổi học
model Lesson {
  id          String       @id @default(cuid())
  bookingId   String?      @unique
  studentId   String?
  teacherId   String
  courseId    String?
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?
  duration    Int          @default(60) // Phút
  meetingUrl  String? // Link meeting
  notes       String? // Ghi chú của giáo viên
  homework    String? // Bài tập về nhà
  status      LessonStatus @default(SCHEDULED)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relations
  booking Booking? @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  student Student?  @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher Teacher  @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  course  Course?  @relation(fields: [courseId], references: [id], onDelete: SetNull)

  @@map("lessons")
}

// Thanh toán
model Payment {
  id            String        @id @default(cuid())
  userId        String
  amount        Decimal       @db.Decimal(10, 2)
  currency      String        @default("VND")
  paymentMethod String // MOMO, VNPAY, BANK_TRANSFER, etc.
  transactionId String?       @unique
  status        PaymentStatus @default(PENDING)
  description   String?
  metadata      Json? // Thông tin bổ sung
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  lessonPackage    LessonPackage?
  courseEnrollment CourseEnrollment?

  @@map("payments")
}

// Đánh giá giáo viên
model Review {
  id        String   @id @default(cuid())
  studentId String
  teacherId String
  rating    Int      @db.SmallInt // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  student User    @relation(fields: [studentId], references: [id], onDelete: Cascade)
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)

  @@unique([studentId, teacherId]) // Mỗi học viên chỉ đánh giá 1 lần cho 1 giáo viên
  @@map("reviews")
}

// Bảng cấu hình hệ thống
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value String
  type  String @default("string") // string, number, boolean, json

  @@map("system_configs")
}
